from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup,  KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, ConversationHandler, CallbackContext, ConversationHandler

from button_callback import button_callback
from helpers import start, get_all_addresses, get_allowed_items, get_prohibited_items, get_pricing_text, process_agreement_accept, process_agreement_decline
from settings import load_config
from storage_db import save_user

REGISTRATION, NAME, LAST_NAME, PATRONYMIC, ADDRESS, PHONE, EMAIL = range(7)


def handle_contact_info(update: Update, context: CallbackContext) -> None:
    if 'expecting_contact' in context.user_data and context.user_data['expecting_contact']:
        context.user_data['contact_info'] = update.message.text

        try:

            pdf_url = os.getenv('PDF_URL')

            response = requests.get(pdf_url)
            response.raise_for_status()

            pdf_file = BytesIO(response.content)
            pdf_file.name = "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ_–Ω–∞_–æ–ø–¥.pdf"

            sent_msg = context.bot.send_document(
                chat_id=query.message.chat_id,
                document=pdf_file,
                caption="üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_agreement")],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="decline_agreement")]
                ])
            )
            context.user_data['agreement_message_id'] = sent_msg.message_id
        except Exception as e:
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
            )
        context.user_data['expecting_contact'] = False


def registration_handler(update: Update, context: CallbackContext) -> int:
    text = update.message.text

    if not hasattr(context.user_data, 'reg_data'):
        context.user_data.reg_data = {}

    if 'step' not in context.user_data.reg_data:
        context.user_data.reg_data['name'] = text
        context.user_data.reg_data['step'] = 'last_name'
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–§–∞–º–∏–ª–∏—é</b>:", parse_mode='HTML')
        return REGISTRATION

    elif context.user_data.reg_data['step'] == 'last_name':
        context.user_data.reg_data['last_name'] = text
        context.user_data.reg_data['step'] = 'patronymic'
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–û—Ç—á–µ—Å—Ç–≤–æ</b> (–µ—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'):", parse_mode='HTML')
        return REGISTRATION

    elif context.user_data.reg_data['step'] == 'patronymic':
        context.user_data.reg_data['patronymic'] = text if text != '-' else None
        context.user_data.reg_data['step'] = 'address'
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ê–¥—Ä–µ—Å</b>:", parse_mode='HTML')
        return REGISTRATION

    elif context.user_data.reg_data['step'] == 'address':
        context.user_data.reg_data['address'] = text
        context.user_data.reg_data['step'] = 'phone'
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            request_contact=True)]],
            resize_keyboard=True)
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–¢–µ–ª–µ—Ñ–æ–Ω</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup)
        return REGISTRATION

    elif context.user_data.reg_data['step'] == 'phone':
        context.user_data.reg_data['phone'] = text
        context.user_data.reg_data['step'] = 'email'
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>Email</b>:", parse_mode='HTML')
        return REGISTRATION

    elif context.user_data.reg_data['step'] == 'email':
        context.user_data.reg_data['email'] = text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        user_data = {
            **context.user_data.get('order_data', {}),
            **context.user_data.reg_data
        }
        save_user(user_data)

        update.message.reply_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–ò–º—è: {user_data['name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {user_data['last_name']}\n"
            f"–û—Ç—á–µ—Å—Ç–≤–æ: {user_data.get('patronymic', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ê–¥—Ä–µ—Å: {user_data['address']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
            f"Email: {user_data['email']}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
            reply_markup=ReplyKeyboardRemove()
        )

        return ConversationHandler.END


def main() -> None:

    try:
        tg_token = load_config()
        updater = Updater(tg_token, use_context=True)
        dp = updater.dispatcher

        
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(button_callback))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_contact_info))
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()
