import os
import requests
from datetime import datetime, timedelta
import calendar
from io import BytesIO

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from data_base.db_conf import BocksVolume
from helpers import get_all_addresses, get_allowed_items, get_prohibited_items, get_pricing_text, process_agreement_accept, process_agreement_decline

REGISTRATION, NAME, LAST_NAME, PATRONYMIC, ADDRESS, PHONE, EMAIL = range(7)


def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data == "open_menu":
        menu_keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π", callback_data="rules")],
            [InlineKeyboardButton("üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è", callback_data="pricing")],
            [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è", callback_data="order_box")]
        ]

        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup(menu_keyboard)
        )
    elif query.data == "rules":
        rules_keyboard = [
            [InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–µ—â–∏", callback_data="allowed_items")],
            [InlineKeyboardButton("‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –≤–µ—â–∏", callback_data="prohibited_items")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="open_menu")]
        ]

        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤–∏–ª:",
            reply_markup=InlineKeyboardMarkup(rules_keyboard))

    elif query.data == "allowed_items":

        query.edit_message_text(
            text=get_allowed_items(),
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø—Ä–∞–≤–∏–ª–∞–º", callback_data="rules")]
            ]))

    elif query.data == "prohibited_items":

        query.edit_message_text(
            text=get_prohibited_items(),
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø—Ä–∞–≤–∏–ª–∞–º", callback_data="rules")]
            ]))
    elif query.data == "pricing":

        query.edit_message_text(
            text=get_pricing_text(),
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="open_menu")]
            ]))

    elif query.data == "order_box":

        order_keyboard = [
            [InlineKeyboardButton("üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="order_delivery")],
            [InlineKeyboardButton("üîÑ –û—Ç–≤–µ–∑—É –≤–µ—â–∏ —Å–∞–º", callback_data="self_pickup")]
        ]

        query.edit_message_text(
            text="–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–µ—â–∏ –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ?",
            reply_markup=InlineKeyboardMarkup(order_keyboard)
        )

    elif query.data == "self_pickup":  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
        addresses = get_all_addresses()
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        address_buttons = [
            [InlineKeyboardButton(address, callback_data=f"address_{i}")]
            for i, address in enumerate(addresses)
        ]

        address_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="order_box")])
        query.edit_message_text(
            text="üè≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:",
            reply_markup=InlineKeyboardMarkup(address_buttons)
        )

    elif query.data.startswith("address_"):
        address_num = int(query.data.split("_")[1])
        addresses = get_all_addresses()
        selected_address = addresses[address_num]

        context.user_data['selected_address'] = selected_address
        volums = BocksVolume.get_all_bocks_volum()
        keyboard = []
        for i in volums:
            keyboard.append([InlineKeyboardButton(f"üì¶ {i.volume} –º¬≥", callback_data=f"size_{i.id}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥–∞–º", callback_data="self_pickup")])
        keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="open_menu")])

        query.edit_message_text(
            text=f"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∫–ª–∞–¥:\n{selected_address}\n\n"
                 "üìè –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–æ–∫—Å–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data.startswith("size_"):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–æ–∫—Å–∞
        size_mapping = {
            "size_small": ("–ú–∞–ª—ã–π (3 –º¬≥)", 1500),
            "size_medium": ("–°—Ä–µ–¥–Ω–∏–π (5 –º¬≥)", 3500),
            "size_large": ("–ë–æ–ª—å—à–æ–π (10 –º¬≥)", 5000)
        }

        selected_size, selected_price = size_mapping[query.data]
        selected_address = context.user_data.get('selected_address', '–Ω–µ —É–∫–∞–∑–∞–Ω')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        context.user_data['selected_size'] = selected_size
        context.user_data['selected_price'] = selected_price

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
        today = datetime.now()
        days_keyboard = []

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        for i in range(7):
            date = today + timedelta(days=i)
            days_keyboard.append(
                [InlineKeyboardButton(
                    f"{date.strftime('%d.%m.%Y')} ({calendar.day_name[date.weekday()]})",
                    callback_data=f"start_date_{date.strftime('%Y-%m-%d')}"
                )]
            )

        days_keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"address_{list(get_all_addresses()).index(selected_address)}")])

        query.edit_message_text(
            text=f"üìù –í–∞—à –≤—ã–±–æ—Ä:\n\n"
                 f"üè≠ –°–∫–ª–∞–¥: {selected_address}\n"
                 f"üì¶ –†–∞–∑–º–µ—Ä –±–æ–∫—Å–∞: {selected_size}\n"
                 f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {selected_price} —Ä—É–±/–º–µ—Å\n\n"
                 "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã:",
            reply_markup=InlineKeyboardMarkup(days_keyboard)
        )

    elif query.data.startswith("start_date_"):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
        start_date = query.data.split("_")[2]
        context.user_data['start_date'] = start_date

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
        start_date_obj = datetime.strptime(start_date, "%Y-%m-%d")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration_keyboard = [
            [InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="duration_1")],
            [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data="duration_3")],
            [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤", callback_data="duration_6")],
            [InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤", callback_data="duration_12")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"size_{context.user_data['selected_size'].split()[0].lower()}")]
        ]

        query.edit_message_text(
            text=f"üìÖ –ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã: {start_date_obj.strftime('%d.%m.%Y')}\n\n"
                 "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã:",
            reply_markup=InlineKeyboardMarkup(duration_keyboard)
        )

    elif query.data.startswith("duration_"):
        months = int(query.data.split("_")[1])
        context.user_data['duration_months'] = months

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        price_per_month = context.user_data['selected_price']
        total_price = price_per_month * months

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        start_date = datetime.strptime(context.user_data['start_date'], "%Y-%m-%d")
        end_date = start_date + timedelta(days=30*months)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['total_price'] = total_price
        context.user_data['end_date'] = end_date.strftime('%Y-%m-%d')

        confirmation_text = f"""
üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:</b>

üè≠ –°–∫–ª–∞–¥: {context.user_data['selected_address']}
üì¶ –†–∞–∑–º–µ—Ä –±–æ–∫—Å–∞: {context.
user_data['selected_size']}
üìÖ –ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã: {start_date.strftime('%d.%m.%Y')}
‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã: {end_date.strftime('%d.%m.%Y')}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:.0f} —Ä—É–± (–∑–∞ {months} –º–µ—Å.)

"""
        confirmation_keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="order_box")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="open_menu")]
        ]

        query.edit_message_text(
            text=confirmation_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(confirmation_keyboard)
        )

    elif query.data == "confirm_order":
        try:

            pdf_url = os.getenv('PDF_URL')

            response = requests.get(pdf_url)
            response.raise_for_status()

            pdf_file = BytesIO(response.content)
            pdf_file.name = "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ_–Ω–∞_–æ–ø–¥.pdf"

            sent_msg = context.bot.send_document(
                chat_id=query.message.chat_id,
                document=pdf_file,
                caption="üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_agreement")],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="decline_agreement")]
                ])
            )
            context.user_data['agreement_message_id'] = sent_msg.message_id
        except Exception as e:
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
            )

    elif query.data == "accept_agreement":
        return process_agreement_accept(update, context)
        

    elif query.data == "decline_agreement":
        return process_agreement_decline(update, context)

    elif query.data == "order_delivery":
        try:

            pdf_url = os.getenv('PDF_URL')
            response = requests.get(pdf_url)
            response.raise_for_status()

            pdf_file = BytesIO(response.content)
            pdf_file.name = "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ_–Ω–∞_–æ–ø–¥.pdf"

            sent_msg = context.bot.send_document(
                chat_id=query.message.chat_id,
                document=pdf_file,
                caption="üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_agreement")],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="decline_agreement")]
                ])
            )
            context.user_data['agreement_message_id'] = sent_msg.message_id
        except Exception as e:
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
            )
    elif query.data == "accept_agreement":
        return process_agreement_accept(update, context)

    elif query.data == "decline_agreement":
        return process_agreement_decline(update, context)
