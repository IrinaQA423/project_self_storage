from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext


def init_order_data(context: CallbackContext):
    if 'orders' not in context.bot_data:
        context.bot_data['orders'] = {
            'new': [
                {'id': 1001, 'client': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', 'status': '–Ω–æ–≤—ã–π'},
                {'id': 1002, 'client': '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', 'status': '–Ω–æ–≤—ã–π'}
            ],
            'storage': [
                {'id': 1000, 'client': '–°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤', 'status': '—Ö—Ä–∞–Ω–∏—Ç—Å—è'}
            ],
            'completed': [],
            'expired': []
        }


def get_order_details(order_id: int, order_data: dict) -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    order_details = {
        "id": order_id,
        "client": order_data.get('client', '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'),
        "phone": order_data.get('phone', '+79123456789'),
        "address": order_data.get('address', '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123'),
        "warehouse": order_data.get('warehouse', '–°–∫–ª–∞–¥ ‚Ññ1'),
        "box_size": order_data.get('box_size', '–°—Ä–µ–¥–Ω–∏–π (5–º¬≥)'),
        "start_date": order_data.get('start_date', '2023-11-15'),
        "end_date": order_data.get('end_date', '2024-01-15'),
        "price": order_data.get('price', '5000 —Ä—É–±'),
        "status": order_data.get('status', '–Ω–æ–≤—ã–π'),
        "created_at": order_data.get('created_at', '2023-11-14 15:30')
    }

    message = (
        f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order_details['client']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_details['phone']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {order_details['address']}\n\n"
        f"üè≠ –°–∫–ª–∞–¥: {order_details['warehouse']}\n"
        f"üì¶ –†–∞–∑–º–µ—Ä –±–æ–∫—Å–∞: {order_details['box_size']}\n\n"
        f"üìÖ –ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã: {order_details['start_date']}\n"
        f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã: {order_details['end_date']}\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_details['price']}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {order_details['status']}\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order_details['created_at']}"
    )

    return order_details, message


def show_expired_orders(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    query = update.callback_query
    query.answer()

    init_order_data(context)
    expired_orders = context.bot_data['orders']['expired']

    if not expired_orders:
        query.edit_message_text(
            "‚è±Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )
        return

    keyboard = []
    for order in expired_orders:
        keyboard.append(
            [InlineKeyboardButton(
                f"‚è±Ô∏è –ó–∞–∫–∞–∑ #{order['id']}",
                callback_data=f"expired_detail_{order['id']}"
            )]
        )

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")])

    query.edit_message_text(
        "‚è±Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def mark_order_expired(update: Update, context: CallbackContext):
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π"""
    query = update.callback_query
    query.answer()
    order_id = int(query.data.split("_")[-1])

    init_order_data(context)
    orders = context.bot_data['orders']

    # –ù–∞—Ö–æ–¥–∏–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–∫–∞–∑
    order_to_move = None
    for i, order in enumerate(orders['storage']):
        if order['id'] == order_id:
            order_to_move = orders['storage'].pop(i)
            break

    if not order_to_move:
        query.edit_message_text(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –∑–∞–∫–∞–∑–∞—Ö")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
    order_to_move['status'] = '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω'

    orders['expired'].append(order_to_move)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    context.bot_data['orders'] = orders

    keyboard = [
        [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑—ã –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏", callback_data="orders_storage")],
        [InlineKeyboardButton("‚è±Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_expired")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]
    ]

    query.edit_message_text(
        f"‚è±Ô∏è –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def show_expired_order_details(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    query.answer()

    order_id = int(query.data.split('_')[-1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    expired_orders = context.bot_data.get('orders', {}).get('expired', [])
    order = next((o for o in expired_orders if o['id'] == order_id), None)

    if not order:
        query.edit_message_text(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    _, message = get_order_details(order_id, order)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"delete_expired_{order_id}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö", callback_data="orders_expired")]
    ]

    query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def show_new_orders(query, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    init_order_data(context)
    orders = context.bot_data['orders']['new']

    if not orders:
        query.edit_message_text(
            "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )
        return

    keyboard = []
    for order in orders:
        keyboard.append(
            [InlineKeyboardButton(f"üÜî –ó–∞–∫–∞–∑ #{order['id']}", callback_data=f"order_detail_{order['id']}")]
        )

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")])

    query.edit_message_text(
        "üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def show_order_details(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    query.answer()

    try:
        order_id = int(query.data.split("_")[-1])
    except (ValueError, IndexError):
        query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞")
        return

    init_order_data(context)
    orders_data = context.bot_data['orders']

    found_order = None
    order_category = None

    for category in ['new', 'storage', 'completed']:
        for order in orders_data[category]:
            if order['id'] == order_id:
                found_order = order
                order_category = category
                break
        if found_order:
            break

    if not found_order:
        query.edit_message_text("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    elif order_category == 'storage':
        keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_order_{order_id}"),
            InlineKeyboardButton("‚è±Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω", callback_data=f"expire_order_{order_id}")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_storage")]
    ]

    _, message = get_order_details(order_id, found_order)

    keyboard = []
    if order_category == 'new':
        keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ù–∞ —Å–∫–ª–∞–¥", callback_data=f"accept_order_{order_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ", callback_data=f"cancel_order_{order_id}")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_new")]
    ]

    elif order_category == 'storage':
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω", callback_data=f"complete_order_{order_id}"),
                InlineKeyboardButton("‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω", callback_data=f"mark_expired_{order_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_storage")]
        ]
    elif order_category == 'completed':
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="orders_completed")]
        ]

    query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def show_completed_orders(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    query = update.callback_query
    query.answer()

    init_order_data(context)
    orders = context.bot_data['orders']['completed']

    if not orders:
        query.edit_message_text(
            "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )
        return

    keyboard = []
    for order in orders:
        keyboard.append(
            [InlineKeyboardButton(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order['id']}",
                callback_data=f"order_detail_{order['id']}"
            )]
        )

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")])

    query.edit_message_text(
        "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def accept_order(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å '–ù–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏'"""
    query = update.callback_query
    query.answer()
    order_id = int(query.data.split("_")[-1])

    init_order_data(context)
    orders = context.bot_data['orders']

    order_to_move = None

    # –ù–∞—Ö–æ–¥–∏–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–∫–∞–∑
    for i, order in enumerate(orders['new']):
        if order['id'] == order_id:
            order_to_move = orders['new'].pop(i)

            break
    if not order_to_move:
        query.edit_message_text(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    order_to_move['status'] = '–Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏'
    orders['storage'].append(order_to_move)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    context.bot_data['orders'] = orders

    keyboard = [
        [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑—ã –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏", callback_data="orders_storage")],
        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_new")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]

    query.edit_message_text(
        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def cancel_order(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑"""
    query = update.callback_query
    query.answer()
    order_id = int(query.data.split("_")[-1])

    init_order_data(context)
    orders = context.bot_data['orders']

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –Ω–æ–≤—ã—Ö
    orders['new'] = [order for order in orders['new'] if order['id'] != order_id]

    keyboard = [
        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_new")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_orders")]
    ]

    query.edit_message_text(
        f"‚ùå –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def show_storage_orders(query, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
    init_order_data(context)
    orders = context.bot_data['orders']['storage']

    if not orders:
        query.edit_message_text(
            "–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]])
        )
        return

    keyboard = []
    for order in orders:
        status_icon = "üì¶" if order['status'] == '—Ö—Ä–∞–Ω–∏—Ç—Å—è' else "‚è≥"
        keyboard.append(
            [InlineKeyboardButton(
                f"üì¶ –ó–∞–∫–∞–∑ #{order['id']}",
                callback_data=f"order_detail_{order['id']}"
            )]
        )

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")])

    query.edit_message_text(
        "üì¶ –ó–∞–∫–∞–∑—ã –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def complete_order(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑"""
    query = update.callback_query
    query.answer()
    order_id = int(query.data.split("_")[-1])

    init_order_data(context)
    orders = context.bot_data['orders']

    order_to_move = None

    # –ù–∞—Ö–æ–¥–∏–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–∫–∞–∑
    for i, order in enumerate(orders['storage']):
        if order['id'] == order_id:
            order_to_move = orders['storage'].pop(i)
            break

    if not order_to_move:
        query.edit_message_text(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –∑–∞–∫–∞–∑–∞—Ö")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
    order_to_move['status'] = '–∑–∞–≤–µ—Ä—à–µ–Ω'
    orders['completed'].append(order_to_move)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    context.bot_data['orders'] = orders

    keyboard = [

        [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="orders_completed")],
        [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑—ã –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏", callback_data="orders_storage")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]

    query.edit_message_text(
        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def delete_expired_order(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑"""
    query = update.callback_query
    query.answer()

    order_id = int(query.data.split('_')[-1])

    if 'orders' not in context.bot_data:
        context.bot_data['orders'] = {'expired': []}

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞
    context.bot_data['orders']['expired'] = [
        o for o in context.bot_data['orders']['expired']
        if o['id'] != order_id
    ]

    query.edit_message_text(
        f"‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id} —É–¥–∞–ª—ë–Ω",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö", callback_data="orders_expired")]
        ])
    )
