from dateutil.relativedelta import relativedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup,  KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, ConversationHandler, CallbackContext, ConversationHandler
from sqlalchemy.exc import SQLAlchemyError    
from button_callback import button_callback
from helpers import start, get_all_addresses, get_allowed_items, get_prohibited_items, get_pricing_text, process_agreement_accept, process_agreement_decline
from settings import load_config
from storage_db import *
from admin import admin_panel, admin_callback_handler, setup_admin_handlers


REGISTRATION, NAME, ADDRESS, PHONE, EMAIL = range(5)


def handle_contact_info(update: Update, context: CallbackContext) -> None:
    if 'expecting_contact' in context.user_data and context.user_data['expecting_contact']:
        context.user_data['contact_info'] = update.message.text

        try:

            pdf_url = os.getenv('PDF_URL')

            response = requests.get(pdf_url)
            response.raise_for_status()

            pdf_file = BytesIO(response.content)
            pdf_file.name = "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ_–Ω–∞_–æ–ø–¥.pdf"

            sent_msg = context.bot.send_document(
                chat_id=query.message.chat_id,
                document=pdf_file,
                caption="üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="accept_agreement")],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="decline_agreement")]
                ])
            )
            context.user_data['agreement_message_id'] = sent_msg.message_id
        except Exception as e:
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
            )
        context.user_data['expecting_contact'] = False


def process_name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –§–ò–û"""
    
    name = update.message.text.strip()
    if not name:
        update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:")
        return NAME
    if 'registration' not in context.user_data:
        context.user_data['registration'] = {}
    
    context.user_data['registration']['name'] = name
    print ("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ  –§–ò–û {name}")
    update.message.reply_text(
         "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–¢–µ–ª–µ—Ñ–æ–Ω</b> (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567):",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]], one_time_keyboard=True)
    )
    return PHONE

def process_phone(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = update.message.text.strip()
    if not phone.startswith('+') or not phone[1:].isdigit():
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
        return PHONE
    
    context.user_data['registration']['phone'] = phone
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>Email</b>:",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_registration")]
        ])
    )
    return EMAIL

def process_email(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ email"""
    email = update.message.text.strip()
    if '@' not in email or '.' not in email.split('@')[-1]:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        return EMAIL
    
    context.user_data['registration']['email'] = email
    update.message.reply_text(
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ê–¥—Ä–µ—Å</b> (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_registration")]
        ])
    )
    return ADDRESS

def process_address(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    address = update.message.text.strip()
    if not address:
        update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
        return ADDRESS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    user_data = context.user_data['registration']
    user_data['address'] = address
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    order_data = context.user_data.get('order_data', {})
    message = (
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n\n"
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"–ò–º—è: {user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"Email: {user_data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ê–¥—Ä–µ—Å: {user_data.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
        f"–¢–∏–ø: {order_data.get('order_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–†–∞–∑–º–µ—Ä –±–æ–∫—Å–∞: {order_data.get('volume', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {order_data.get('start_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {order_data.get('duration', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º–µ—Å.\n"
        f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {order_data.get('total_price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}‚ÇΩ"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        save_to_database(user_data)

        
        
        update.message.reply_text(
            text=message,
            parse_mode='HTML'
            
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
    
    return ConversationHandler.END

def save_to_database(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    from db_conf import db_session, User, Order, BocksVolume, Warehouse
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            tg_id=user_data.get('user_id'),
            name=user_data.get('name'),
            email=user_data.get('email'),
            phone=user_data.get('phone'),
            address=user_data.get('address'),
            consent_pd=True
        )
        db_session.add(user)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        default_warehouse = db_session.query(Warehouse).first()
        default_volume = db_session.query(BocksVolume).first()
        
        order = Order(
            user_id=user_data.get('user_id'),
            taking_it_myself=False,
            calling_things=False,
            volume_id=default_volume.id if default_volume else 1,
            warehouse_id=default_warehouse.id if default_warehouse else 1,
            payment=False,
            rent_start=datetime.now().date(),
            rent_end=(datetime.now() + relativedelta(months=1)).date()
        )
        db_session.add(order)
        
        db_session.commit()
        
    except SQLAlchemyError as e:
        db_session.rollback()
        raise Exception(f"Database error: {str(e)}")
    except Exception as e:
        raise Exception(f"Error: {str(e)}")

def setup_registration_handlers(dispatcher):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ConversationHandler —Å –Ω–æ–≤—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(process_agreement_accept, pattern='^accept_agreement$')],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, process_name)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, process_phone)],
            EMAIL: [MessageHandler(Filters.text & ~Filters.command, process_email)],
            ADDRESS: [MessageHandler(Filters.text & ~Filters.command, process_address)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_registration),
            CallbackQueryHandler(cancel_registration, pattern='^cancel_registration$'),
            MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$'), cancel_registration)  # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    ]
)     
        
    dispatcher.add_handler(conv_handler)

def cancel_registration(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        update.message.reply_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
    except AttributeError:
        update.callback_query.edit_message_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:

    try:
        tg_token = load_config()
        updater = Updater(tg_token, use_context=True)
        dp = updater.dispatcher

        setup_registration_handlers(dp) 
        setup_admin_handlers(dp)
        
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(button_callback))
         
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()
