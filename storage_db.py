import sqlite3
from datetime import datetime


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('storage.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        email TEXT,
        registration_date TIMESTAMP
    )
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–∫–ª–∞–¥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS warehouses (
        warehouse_id INTEGER PRIMARY KEY AUTOINCREMENT,
        address TEXT NOT NULL,
        description TEXT
    )
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–æ–∫—Å–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS storage_boxes (
        box_id INTEGER PRIMARY KEY AUTOINCREMENT,
        warehouse_id INTEGER,
        size TEXT NOT NULL,
        price INTEGER NOT NULL,
        is_available BOOLEAN DEFAULT 1,
        FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)
    )
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        box_id INTEGER,
        start_date TIMESTAMP,
        end_date TIMESTAMP,
        total_price INTEGER,
        status TEXT DEFAULT 'processing',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(user_id),
        FOREIGN KEY (box_id) REFERENCES storage_boxes(box_id)
    )
    ''')

    warehouses = [
        ("üìç –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10", "–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥ —Å –±–æ–∫—Å–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"),
        ("üìç –≥. –ú–æ—Å–∫–≤–∞, –ø—Ä. –ú–∏—Ä–∞, –¥. 25", "–°–∫–ª–∞–¥ —Å –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º"),
        ("üìç –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 15", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥")
    ]
    cursor.executemany("INSERT INTO warehouses (address, description) VALUES (?, ?)", warehouses)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –±–æ–∫—Å–æ–≤
    boxes = [
        (1, "–ú–∞–ª—ã–π (3 –º¬≥)", 1500),
        (1, "–°—Ä–µ–¥–Ω–∏–π (5 –º¬≥)", 3500),
        (1, "–ë–æ–ª—å—à–æ–π (10 –º¬≥)", 5000),
        (2, "–ú–∞–ª—ã–π (3 –º¬≥)", 1700),
        (2, "–°—Ä–µ–¥–Ω–∏–π (5 –º¬≥)", 3700),
        (2, "–ë–æ–ª—å—à–æ–π (10 –º¬≥)", 5200),
        (3, "–ú–∞–ª—ã–π (3 –º¬≥)", 1600),
        (3, "–°—Ä–µ–¥–Ω–∏–π (5 –º¬≥)", 3600),
        (3, "–ë–æ–ª—å—à–æ–π (10 –º¬≥)", 5100)
    ]
    cursor.executemany("INSERT INTO storage_boxes (warehouse_id, size, price) VALUES (?, ?, ?)", boxes)

    conn.commit()
    conn.close()


def save_user(user_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('storage.db')
    cursor = conn.cursor()

    cursor.execute('''
    INSERT OR REPLACE INTO users
    (user_id, username, first_name, last_name, phone, email, registration_date)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (
        user_data.get('user_id'),
        user_data.get('username'),
        user_data.get('first_name'),
        user_data.get('last_name'),
        user_data.get('phone'),
        user_data.get('email'),
        datetime.now()
    ))
    conn.commit()
    conn.close()


def save_order(order_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    conn = sqlite3.connect('storage.db')
    cursor = conn.cursor()

    cursor.execute('''
    INSERT INTO orders
    (user_id, box_id, start_date, end_date, total_price)
    VALUES (?, ?, ?, ?, ?)
    ''', (
        order_data.get('user_id'),
        order_data.get('box_id'),
        order_data.get('start_date'),
        order_data.get('end_date'),
        order_data.get('total_price')
    ))

    conn.commit()
    conn.close()
    return cursor.lastrowid


def get_warehouses():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤"""
    conn = sqlite3.connect('storage.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM warehouses")
    warehouses = cursor.fetchall()

    conn.close()
    return warehouses


def get_available_boxes(warehouse_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–∫—Å–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    conn = sqlite3.connect('storage.db')
    cursor = conn.cursor()

    cursor.execute('''
    SELECT * FROM storage_boxes
    WHERE warehouse_id = ? AND is_available = 1
    ''', (warehouse_id,))

    boxes = cursor.fetchall()
    conn.close()
    return boxes


def show_database_content():
    conn = sqlite3.connect('storage.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()

    print("\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    for table in tables:
        table_name = table[0]
        print(f"\n–¢–∞–±–ª–∏—Ü–∞: {table_name}")
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞:")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"PRAGMA table_info({table_name});")
        columns = cursor.fetchall()
        for col in columns:
            print(f"  {col[1]} ({col[2]})")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\n–î–∞–Ω–Ω—ã–µ:")
        cursor.execute(f"SELECT * FROM {table_name};")
        rows = cursor.fetchall()
        for row in rows:
            print(row)

    conn.close()
